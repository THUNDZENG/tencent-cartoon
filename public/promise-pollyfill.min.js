var t = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
    return typeof t;
} : function(t) {
    return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
};

!function(n) {
    function e() {
        for (var t = 0; t < P.length; t++) P[t][0](P[t][1]);
        P = [], m = !1;
    }
    function o(t, n) {
        P.push([ t, n ]), m || (m = !0, g(e, 0));
    }
    function r(t, n) {
        function e(t) {
            a(n, t);
        }
        try {
            t(function(t) {
                c(n, t);
            }, e);
        } catch (t) {
            e(t);
        }
    }
    function i(t) {
        var n = (e = t.owner).state_, e = e.data_, o = t[n];
        if (t = t.then, "function" == typeof o) {
            n = _;
            try {
                e = o(e);
            } catch (n) {
                a(t, n);
            }
        }
        f(t, e) || (n === _ && c(t, e), n === b && a(t, e));
    }
    function f(n, e) {
        var o;
        try {
            if (n === e) throw new TypeError("A promises callback cannot return that same promise.");
            if (e && ("function" == typeof e || "object" === (void 0 === e ? "undefined" : t(e)))) {
                var r = e.then;
                if ("function" == typeof r) return r.call(e, function(t) {
                    o || (o = !0, e !== t ? c(n, t) : u(n, t));
                }, function(t) {
                    o || (o = !0, a(n, t));
                }), !0;
            }
        } catch (t) {
            return o || a(n, t), !0;
        }
        return !1;
    }
    function c(t, n) {
        t !== n && f(t, n) || u(t, n);
    }
    function u(t, n) {
        t.state_ === w && (t.state_ = v, t.data_ = n, o(l, t));
    }
    function a(t, n) {
        t.state_ === w && (t.state_ = v, t.data_ = n, o(h, t));
    }
    function s(t) {
        var n = t.then_;
        for (t.then_ = void 0, t = 0; t < n.length; t++) i(n[t]);
    }
    function l(t) {
        t.state_ = _, s(t);
    }
    function h(t) {
        t.state_ = b, s(t);
    }
    function p(t) {
        if ("function" != typeof t) throw new TypeError("Promise constructor takes a function argument");
        if (!1 == this instanceof p) throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
        this.then_ = [], r(t, this);
    }
    var y = n.Promise, d = y && "resolve" in y && "reject" in y && "all" in y && "race" in y && function() {
        var t;
        return new y(function(n) {
            t = n;
        }), "function" == typeof t;
    }();
    "undefined" != typeof exports && exports ? (exports.Promise = d ? y : p, exports.Polyfill = p) : "function" == typeof define && define.amd ? define(function() {
        return d ? y : p;
    }) : d || (n.Promise = p);
    var m, w = "pending", v = "sealed", _ = "fulfilled", b = "rejected", j = function() {}, g = "undefined" != typeof setImmediate ? setImmediate : setTimeout, P = [];
    p.prototype = {
        constructor: p,
        state_: w,
        then_: null,
        data_: void 0,
        then: function(t, n) {
            var e = {
                owner: this,
                then: new this.constructor(j),
                fulfilled: t,
                rejected: n
            };
            return this.state_ === _ || this.state_ === b ? o(i, e) : this.then_.push(e), e.then;
        },
        catch: function(t) {
            return this.then(null, t);
        }
    }, p.all = function(t) {
        if ("[object Array]" !== Object.prototype.toString.call(t)) throw new TypeError("You must pass an array to Promise.all().");
        return new this(function(n, e) {
            for (var o, r = [], i = 0, f = 0; f < t.length; f++) (o = t[f]) && "function" == typeof o.then ? o.then(function(t) {
                return i++, function(e) {
                    r[t] = e, --i || n(r);
                };
            }(f), e) : r[f] = o;
            i || n(r);
        });
    }, p.race = function(t) {
        if ("[object Array]" !== Object.prototype.toString.call(t)) throw new TypeError("You must pass an array to Promise.race().");
        return new this(function(n, e) {
            for (var o, r = 0; r < t.length; r++) (o = t[r]) && "function" == typeof o.then ? o.then(n, e) : n(o);
        });
    }, p.resolve = function(n) {
        return n && "object" === (void 0 === n ? "undefined" : t(n)) && n.constructor === this ? n : new this(function(t) {
            t(n);
        });
    }, p.reject = function(t) {
        return new this(function(n, e) {
            e(t);
        });
    };
}("undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : void 0);